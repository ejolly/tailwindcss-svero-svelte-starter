{
  "version": 3,
  "file": "components.css",
  "sources": [
    "../src/components/NavLink.svelte",
    "../src/components/Button.svelte",
    "../node_modules/svero/src/Router.svelte"
  ],
  "sourcesContent": [
    "<!-- This is the Navigation Link component that get created and placed within Nav.svelte. It keeps track of the current route and adds a red underline if the corresponding route is active. Using multiple such components makes it easier to create several different nav bar links that behave identically.-->\n<script>\nimport { currentRoute } from \"../utils/stores.js\";\nimport { Link } from \"svero\";\nexport let href;\nfunction updateRoute(event) {\n    currentRoute.set(href);\n}\n</script>\n\n<style type=\"text/postcss\">.active{border-color:#e53e3e;border-bottom-width:2px;padding-bottom:1rem}</style>\n\n<span class=\"px-1 py-1 m-2\">\n    <Link href=\"{href}\">\n        <span on:click={updateRoute} class=\"{$currentRoute === href ? 'active' : 'pb-4' }\">\n            <slot></slot>\n        </span>\n    </Link>\n</span>",
    "<!-- This is a simple Button component created from the Svelte tutorial. It's used in the About.svelte component.-->\n<script>\n  let clicks = 0;\n\n  const handleClick = () => (clicks += 1);\n</script>\n\n<style type=\"text/postcss\">.space{padding:.5rem 1rem}.color{color:#fff}</style>\n\n<button\n  class=\"color space border-none bg-blue-700 hover:bg-blue-400 rounded\"\n  on:click={handleClick}>\n  Clicked {clicks} {clicks === 1 ? 'time' : 'times'}\n</button>\n",
    "<script>\n  import Path from 'path-parser'\n  import { writable } from 'svelte/store';\n  import { onMount, getContext, setContext } from 'svelte';\n\n  let t;\n  let ctx;\n  let ctxLoaded = false;\n  let currentComponent = null;\n\n  const paths = [];\n  const activePath = writable(null);\n\n  function updateComponent(route, params = {}) {\n    if (currentComponent && currentComponent.$destroy) {\n      currentComponent.$destroy();\n      currentComponent = null;\n    }\n\n    $activePath = route.path;\n\n    if (!route.component) return;\n\n    currentComponent = new route.component({\n      target: ctx,\n      props: {\n        router: {\n          route,\n          params\n        }\n      }\n    });\n  }\n\n  function gotoRoute(route) {\n    history.pushState({}, '', route);\n\n    const popEvent = new Event('popstate');\n    window.dispatchEvent(popEvent);\n  }\n\n  function handleRoute(route, result) {\n    // If there is no condition, but there is a redirect, simply redirect\n    if (!route.condition && route.redirect) {\n      gotoRoute(route.redirect);\n      return true;\n    }\n\n    // If there is condition, handle it\n    if (route.condition && (typeof route.condition === 'boolean' || typeof route.condition === 'function')) {\n      if (typeof route.condition === 'boolean' && route.condition) {\n        updateComponent(route, result);\n        return true;\n      }\n\n      if (typeof route.condition === 'function' && route.condition()) {\n        updateComponent(route, result);\n        return true;\n      }\n\n      gotoRoute(route.redirect);\n      return true;\n    }\n\n    updateComponent(route, result);\n    return true;\n  }\n\n  function handlePopState() {\n    paths.some((route) => {\n      const browserPath = window.location.pathname;\n\n      // If route matches exactly the url path, load the component\n      // and stop the route checking\n      if (route.path === browserPath) {\n        return handleRoute(route);\n      }\n\n      // If route includes params, check if it matches with the URL\n      // and stop the route checking\n      if (route.path.includes(':')) {\n        const path = new Path(route.path);\n        const result = path.test(browserPath);\n\n        if (result) {\n          return handleRoute(route, result);\n        }\n      }\n\n      // If route is wildcard (*), fallbacks to the component\n      // and stop the route checking\n      if (route.path === '*') {\n        return handleRoute(route);\n      }\n    });\n  }\n\n  function debouncedHandlePopState() {\n    clearTimeout(t);\n    t = setTimeout(handlePopState, 100);\n  }\n\n  function assignRoute(route) {\n    paths.push(route);\n    debouncedHandlePopState();\n  }\n\n  function unassignRoute(path) {\n    const offset = paths.findIndex(route => route.path === path);\n\n    if (offset !== -1) {\n      paths.splice(offset, 1);\n      debouncedHandlePopState();\n    }\n  }\n\n  onMount(() => {\n    ctx = document.querySelector('[data-svero=\"ctx\"]').parentElement;\n    ctxLoaded = true;\n    debouncedHandlePopState();\n  });\n\n  setContext('__svero__', {\n    activePath,\n    paths,\n    gotoRoute,\n    assignRoute,\n    updateComponent\n  });\n</script>\n\n<style>.ctx{display:none}</style>\n\n<svelte:window on:popstate={handlePopState}></svelte:window>\n\n{#if !ctxLoaded}\n  <div class=\"ctx\" data-svero=\"ctx\"></div>\n{/if}\n\n<slot></slot>\n"
  ],
  "names": [],
  "mappings": "AAU2B,qBAAO,CAAC,aAAa,OAAO,CAAC,oBAAoB,GAAG,CAAC,eAAe,IAAI,CAAC;ACHzE,oBAAM,CAAC,QAAQ,KAAK,CAAC,IAAI,CAAC,oBAAM,CAAC,MAAM,IAAI,CAAC;AC4HhE,kBAAI,CAAC,QAAQ,IAAI,CAAC"
}